/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Recommendation as PrismaRecommendation,
  Movie as PrismaMovie,
  User as PrismaUser,
} from "@prisma/client";

export class RecommendationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RecommendationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.recommendation.count(args);
  }

  async recommendations<T extends Prisma.RecommendationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RecommendationFindManyArgs>
  ): Promise<PrismaRecommendation[]> {
    return this.prisma.recommendation.findMany<Prisma.RecommendationFindManyArgs>(
      args
    );
  }
  async recommendation<T extends Prisma.RecommendationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RecommendationFindUniqueArgs>
  ): Promise<PrismaRecommendation | null> {
    return this.prisma.recommendation.findUnique(args);
  }
  async createRecommendation<T extends Prisma.RecommendationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RecommendationCreateArgs>
  ): Promise<PrismaRecommendation> {
    return this.prisma.recommendation.create<T>(args);
  }
  async updateRecommendation<T extends Prisma.RecommendationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RecommendationUpdateArgs>
  ): Promise<PrismaRecommendation> {
    return this.prisma.recommendation.update<T>(args);
  }
  async deleteRecommendation<T extends Prisma.RecommendationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RecommendationDeleteArgs>
  ): Promise<PrismaRecommendation> {
    return this.prisma.recommendation.delete(args);
  }

  async getMovie(parentId: string): Promise<PrismaMovie | null> {
    return this.prisma.recommendation
      .findUnique({
        where: { id: parentId },
      })
      .movie();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.recommendation
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
