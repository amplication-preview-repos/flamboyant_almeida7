/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ScrapeSource } from "./ScrapeSource";
import { ScrapeSourceCountArgs } from "./ScrapeSourceCountArgs";
import { ScrapeSourceFindManyArgs } from "./ScrapeSourceFindManyArgs";
import { ScrapeSourceFindUniqueArgs } from "./ScrapeSourceFindUniqueArgs";
import { CreateScrapeSourceArgs } from "./CreateScrapeSourceArgs";
import { UpdateScrapeSourceArgs } from "./UpdateScrapeSourceArgs";
import { DeleteScrapeSourceArgs } from "./DeleteScrapeSourceArgs";
import { ScrapeSourceService } from "../scrapeSource.service";
@graphql.Resolver(() => ScrapeSource)
export class ScrapeSourceResolverBase {
  constructor(protected readonly service: ScrapeSourceService) {}

  async _scrapeSourcesMeta(
    @graphql.Args() args: ScrapeSourceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ScrapeSource])
  async scrapeSources(
    @graphql.Args() args: ScrapeSourceFindManyArgs
  ): Promise<ScrapeSource[]> {
    return this.service.scrapeSources(args);
  }

  @graphql.Query(() => ScrapeSource, { nullable: true })
  async scrapeSource(
    @graphql.Args() args: ScrapeSourceFindUniqueArgs
  ): Promise<ScrapeSource | null> {
    const result = await this.service.scrapeSource(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ScrapeSource)
  async createScrapeSource(
    @graphql.Args() args: CreateScrapeSourceArgs
  ): Promise<ScrapeSource> {
    return await this.service.createScrapeSource({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ScrapeSource)
  async updateScrapeSource(
    @graphql.Args() args: UpdateScrapeSourceArgs
  ): Promise<ScrapeSource | null> {
    try {
      return await this.service.updateScrapeSource({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ScrapeSource)
  async deleteScrapeSource(
    @graphql.Args() args: DeleteScrapeSourceArgs
  ): Promise<ScrapeSource | null> {
    try {
      return await this.service.deleteScrapeSource(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
