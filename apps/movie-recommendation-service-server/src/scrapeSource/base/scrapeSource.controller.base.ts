/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ScrapeSourceService } from "../scrapeSource.service";
import { ScrapeSourceCreateInput } from "./ScrapeSourceCreateInput";
import { ScrapeSource } from "./ScrapeSource";
import { ScrapeSourceFindManyArgs } from "./ScrapeSourceFindManyArgs";
import { ScrapeSourceWhereUniqueInput } from "./ScrapeSourceWhereUniqueInput";
import { ScrapeSourceUpdateInput } from "./ScrapeSourceUpdateInput";

export class ScrapeSourceControllerBase {
  constructor(protected readonly service: ScrapeSourceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ScrapeSource })
  async createScrapeSource(
    @common.Body() data: ScrapeSourceCreateInput
  ): Promise<ScrapeSource> {
    return await this.service.createScrapeSource({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
        url: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ScrapeSource] })
  @ApiNestedQuery(ScrapeSourceFindManyArgs)
  async scrapeSources(@common.Req() request: Request): Promise<ScrapeSource[]> {
    const args = plainToClass(ScrapeSourceFindManyArgs, request.query);
    return this.service.scrapeSources({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
        url: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ScrapeSource })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async scrapeSource(
    @common.Param() params: ScrapeSourceWhereUniqueInput
  ): Promise<ScrapeSource | null> {
    const result = await this.service.scrapeSource({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
        url: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ScrapeSource })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateScrapeSource(
    @common.Param() params: ScrapeSourceWhereUniqueInput,
    @common.Body() data: ScrapeSourceUpdateInput
  ): Promise<ScrapeSource | null> {
    try {
      return await this.service.updateScrapeSource({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ScrapeSource })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteScrapeSource(
    @common.Param() params: ScrapeSourceWhereUniqueInput
  ): Promise<ScrapeSource | null> {
    try {
      return await this.service.deleteScrapeSource({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
