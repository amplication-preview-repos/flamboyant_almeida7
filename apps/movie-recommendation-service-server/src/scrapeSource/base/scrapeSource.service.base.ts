/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ScrapeSource as PrismaScrapeSource } from "@prisma/client";

export class ScrapeSourceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ScrapeSourceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.scrapeSource.count(args);
  }

  async scrapeSources<T extends Prisma.ScrapeSourceFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScrapeSourceFindManyArgs>
  ): Promise<PrismaScrapeSource[]> {
    return this.prisma.scrapeSource.findMany<Prisma.ScrapeSourceFindManyArgs>(
      args
    );
  }
  async scrapeSource<T extends Prisma.ScrapeSourceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScrapeSourceFindUniqueArgs>
  ): Promise<PrismaScrapeSource | null> {
    return this.prisma.scrapeSource.findUnique(args);
  }
  async createScrapeSource<T extends Prisma.ScrapeSourceCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScrapeSourceCreateArgs>
  ): Promise<PrismaScrapeSource> {
    return this.prisma.scrapeSource.create<T>(args);
  }
  async updateScrapeSource<T extends Prisma.ScrapeSourceUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScrapeSourceUpdateArgs>
  ): Promise<PrismaScrapeSource> {
    return this.prisma.scrapeSource.update<T>(args);
  }
  async deleteScrapeSource<T extends Prisma.ScrapeSourceDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScrapeSourceDeleteArgs>
  ): Promise<PrismaScrapeSource> {
    return this.prisma.scrapeSource.delete(args);
  }
}
